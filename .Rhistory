sf::st_sf(crs = 4326)
#create a polygon object
poly <- list(rbind(
c(-88.533220,45.431675),
c(-88.532662,45.438511),
c( -88.519444,45.439143),
c(-88.519787,45.432036),
c(-88.533220,45.431675)
)) %>%
sf::st_polygon() %>%
sf::st_sfc() %>%
sf::st_sf(crs = 4326)
hydro_lakes <- paste("https://dnrmaps.wi.gov/arcgis2/rest/services/",
"TS_AGOL_STAGING_SERVICES/EN_AGOL_STAGING_SurfaceWater_WTM/",
"MapServer/1",
sep = "")
#test get_layer_by_point
test_that("get_layer_by_point returns the correct WATERBODY_WBIC",
{
otter_lake_point <- get_layer_by_point(url = hydro_lakes,
geometry =
format_point_coords(point))
expect_equal(otter_lake_point$WATERBODY_WBIC,549400)
})
#test get_layer_by_multipoint
test_that("get_layer_by_point returns the correct WATERBODY_WBIC",
{
otter_lake_multipoint <-
get_layer_by_multipoint(url = hydro_lakes,
geometry =
format_multipoint_coords(multipoint))
expect_equal(otter_lake_point$WATERBODY_WBIC,549400)
})
#test get_layer_by_line
test_that("get_layer_by_line returns the correct WATERBODY_WBIC",
{
otter_lake_line <- get_layer_by_line(url = hydro_lakes,
geometry =
format_line_coords(line))
expect_equal(otter_lake_line$WATERBODY_WBIC,549400)
})
#test get_layer_by_poly
test_that("get_layer_by_poly returns the correct WATERBODY_WBIC",
{
otter_lake_poly <- get_layer_by_poly(url = hydro_lakes,
geometry =
format_polygon_coords(poly))
expect_equal(otter_lake_poly$WATERBODY_WBIC,549400)
})
#test get_layer_by_envelope
test_that("get_layer_by_envelope returns the correct WATERBODY_WBIC",
{
otter_lake_env <- get_layer_by_envelope(url = hydro_lakes,
geometry =
format_envelope_coords(poly))
expect_equal(otter_lake_env$WATERBODY_WBIC,549400)
})
otter_lake_multipoint <-
get_layer_by_multipoint(url = hydro_lakes,
geometry =
format_multipoint_coords(multipoint))
library(arcgis.rest)
#create spatial and character objects to run tests on
#create multipoint object to test
multipoint <- rbind(c(0, 0), c(1, 1), c(2, 1)) %>%
sf::st_multipoint() %>%
sf::st_sfc() %>%
sf::st_sf(crs = 4326)
#create line object to test
line <- rbind(c(0, 0), c(1, 1), c(2, 1)) %>%
sf::st_linestring() %>%
sf::st_sfc() %>%
sf::st_sf(crs = 4326)
#create polygon object to test
poly <-
list(rbind(
c(0, 0), c(0, 1), c(0, 2), c(1, 2), c(1, 3), c(2, 3),
c(2, 4), c(2, 5), c(1, 5), c(0, 5), c(0, 3), c(0, 0)
)) %>%
sf::st_polygon() %>%
sf::st_sfc() %>%
sf::st_sf(crs = 4326)
#run tests
#test format_multipoint_coords
expected_mulitpoint_output <-
paste("{'points':[[[0,0],[1,1],[2,1]]],",
"'spatialReference':{'wkid':4326}}",
sep = "")
test_that("format_multipoint_coords returns a properly formatted character object",
{
actual_multipoint_output <-
format_multipoint_coords(multipoint)
expect_equal(expected_mulitpoint_output, actual_multipoint_output)
})
#test format_line_coords
expected_line_output <-
paste("{'paths':[[[0,0],[1,1],[2,1]]],",
"'spatialReference':{'wkid':4326}}",
sep = "")
test_that("format_line_coords returns a properly formatted character object",
{
actual_line_output <- format_line_coords(line)
expect_equal(expected_line_output, actual_line_output)
})
#test format_polygon_coords
expected_polygon_output <-
paste("{'rings':[[[0,0],[0,1],[0,2],[1,2],[1,3],[2,3],[2,4],[2,5],[1,5],",
"[0,5],[0,3],[0,0]]],'spatialReference':{'wkid':4326}}",
sep = "")
test_that("format_polygon_coords returns a properly formatted character object",
{
actual_polygon_output <- format_polygon_coords(poly)
expect_equal(expected_polygon_output, actual_polygon_output)
})
#test format_envelope_coords
expected_envelope_output <- "xmin : 0, ymin : 0, xmax : 2, ymax : 5"
test_that("format_envelope_coords returns a properly formatted character object",
{
actual_envelope_output <- format_envelope_coords(poly)
expect_equal(expected_envelope_output, actual_envelope_output)
})
actual_envelope_output <- format_envelope_coords(poly)
library(arcgis.rest)
#create a point object
point <- c(-88.526848,45.435216)%>%
sf::st_point()%>%
sf::st_sfc() %>%
sf::st_sf(crs = 4326)
#create a multipoint object
multipoint <- rbind(
c(-88.526848,45.435216),
c(-88.490821,45.444325))%>%
sf::st_multipoint()%>%
sf::st_sfc() %>%
sf::st_sf(crs = 4326)
#create a line object
line <- rbind(c(-88.534444, 45.436479),
c(-88.521956, 45.433680)) %>%
sf::st_linestring() %>%
sf::st_sfc() %>%
sf::st_sf(crs = 4326)
#create a polygon object
poly <- list(rbind(
c(-88.533220,45.431675),
c(-88.532662,45.438511),
c( -88.519444,45.439143),
c(-88.519787,45.432036),
c(-88.533220,45.431675)
)) %>%
sf::st_polygon() %>%
sf::st_sfc() %>%
sf::st_sf(crs = 4326)
hydro_lakes <- paste("https://dnrmaps.wi.gov/arcgis2/rest/services/",
"TS_AGOL_STAGING_SERVICES/EN_AGOL_STAGING_SurfaceWater_WTM/",
"MapServer/1",
sep = "")
test_that("get_layer_by_point returns the correct WATERBODY_WBIC",
{
otter_lake_point <- get_layer_by_point(url = hydro_lakes,
geometry =
format_point_coords(point))
expect_equal(otter_lake_point$WATERBODY_WBIC,549400)
})
otter_lake_multipoint <-
get_layer_by_multipoint(url = hydro_lakes,
geometry =
format_multipoint_coords(multipoint))
otter_lake_line <- get_layer_by_line(url = hydro_lakes,
geometry =
format_line_coords(line))
otter_lake_poly <- get_layer_by_poly(url = hydro_lakes,
geometry =
format_polygon_coords(poly))
otter_lake_point <- get_layer_by_point(url = hydro_lakes,
geometry =
format_point_coords(point))
context("Retrieve Layers by Geometry")
library(arcgis.rest)
#create a point object
point <- c(-88.526848,45.435216)%>%
sf::st_point()%>%
sf::st_sfc() %>%
sf::st_sf(crs = 4326)
#create a multipoint object
multipoint <- rbind(
c(-88.526848,45.435216),
c(-88.490821,45.444325))%>%
sf::st_multipoint()%>%
sf::st_sfc() %>%
sf::st_sf(crs = 4326)
#create a line object
line <- rbind(c(-88.534444, 45.436479),
c(-88.521956, 45.433680)) %>%
sf::st_linestring() %>%
sf::st_sfc() %>%
sf::st_sf(crs = 4326)
#create a polygon object
poly <- list(rbind(
c(-88.533220,45.431675),
c(-88.532662,45.438511),
c( -88.519444,45.439143),
c(-88.519787,45.432036),
c(-88.533220,45.431675)
)) %>%
sf::st_polygon() %>%
sf::st_sfc() %>%
sf::st_sf(crs = 4326)
hydro_lakes <- paste("https://dnrmaps.wi.gov/arcgis2/rest/services/",
"TS_AGOL_STAGING_SERVICES/EN_AGOL_STAGING_SurfaceWater_WTM/",
"MapServer/1",
sep = "")
#test get_layer_by_point
test_that("get_layer_by_point returns the correct WATERBODY_WBIC",
{
otter_lake_point <- get_layer_by_point(url = hydro_lakes,
geometry =
format_point_coords(point))
expect_equal(otter_lake_point$WATERBODY_WBIC,549400)
})
#test get_layer_by_multipoint
test_that("get_layer_by_point returns the correct WATERBODY_WBIC",
{
otter_lake_multipoint <-
get_layer_by_multipoint(url = hydro_lakes,
geometry =
format_multipoint_coords(multipoint))
expect_equal(otter_lake_point$WATERBODY_WBIC,549400)
})
#test get_layer_by_line
test_that("get_layer_by_line returns the correct WATERBODY_WBIC",
{
otter_lake_line <- get_layer_by_line(url = hydro_lakes,
geometry =
format_line_coords(line))
expect_equal(otter_lake_line$WATERBODY_WBIC,549400)
})
#test get_layer_by_poly
test_that("get_layer_by_poly returns the correct WATERBODY_WBIC",
{
otter_lake_poly <- get_layer_by_poly(url = hydro_lakes,
geometry =
format_polygon_coords(poly))
expect_equal(otter_lake_poly$WATERBODY_WBIC,549400)
})
#test get_layer_by_envelope
test_that("get_layer_by_envelope returns the correct WATERBODY_WBIC",
{
otter_lake_env <- get_layer_by_envelope(url = hydro_lakes,
geometry =
format_envelope_coords(poly))
expect_equal(otter_lake_env$WATERBODY_WBIC,549400)
})
#test get_layer_by_multipoint
test_that("get_layer_by_point returns the correct WATERBODY_WBIC",
{
otter_lake_multipoint <-
get_layer_by_multipoint(url = hydro_lakes,
geometry =
format_multipoint_coords(multipoint))
expect_equal(otter_lake_multipoint$WATERBODY_WBIC,549400)
})
get_layer_by_multipoint(url = hydro_lakes,
geometry =
format_multipoint_coords(multipoint))
format_point_coords(point)
format_multipoint_coords(multipoint)
point
otter_lake_point <- get_layer_by_point(url = hydro_lakes,
geometry =
format_point_coords(point))
format_point_coords(point)
context("Formatting Coordinates")
library(arcgis.rest)
#create spatial and character objects to run tests on
#create multipoint object to test
multipoint <- rbind(c(0, 0), c(1, 1), c(2, 1)) %>%
sf::st_multipoint() %>%
sf::st_sfc() %>%
sf::st_sf(crs = 4326)
#create line object to test
line <- rbind(c(0, 0), c(1, 1), c(2, 1)) %>%
sf::st_linestring() %>%
sf::st_sfc() %>%
sf::st_sf(crs = 4326)
#create polygon object to test
poly <-
list(rbind(
c(0, 0), c(0, 1), c(0, 2), c(1, 2), c(1, 3), c(2, 3),
c(2, 4), c(2, 5), c(1, 5), c(0, 5), c(0, 3), c(0, 0)
)) %>%
sf::st_polygon() %>%
sf::st_sfc() %>%
sf::st_sf(crs = 4326)
#run tests
expected_mulitpoint_output <-
paste("{'points':[[[0,0],[1,1],[2,1]]],",
"'spatialReference':{'wkid':4326}}",
sep = "")
test_that("format_multipoint_coords returns a properly formatted character object",
{
actual_multipoint_output <-
format_multipoint_coords(multipoint)
expect_equal(expected_mulitpoint_output, actual_multipoint_output)
})
otter_lake_point <- get_layer_by_point(url = hydro_lakes,
geometry =
format_point_coords(point))
context("Retrieve Layers by Geometry")
library(arcgis.rest)
#create a point object
point <- c(-88.526848,45.435216)%>%
sf::st_point()%>%
sf::st_sfc() %>%
sf::st_sf(crs = 4326)
#create a multipoint object
multipoint <- rbind(
c(-88.526848,45.435216),
c(-88.490821,45.444325))%>%
sf::st_multipoint()%>%
sf::st_sfc() %>%
sf::st_sf(crs = 4326)
#create a line object
line <- rbind(c(-88.534444, 45.436479),
c(-88.521956, 45.433680)) %>%
sf::st_linestring() %>%
sf::st_sfc() %>%
sf::st_sf(crs = 4326)
#create a polygon object
poly <- list(rbind(
c(-88.533220,45.431675),
c(-88.532662,45.438511),
c( -88.519444,45.439143),
c(-88.519787,45.432036),
c(-88.533220,45.431675)
)) %>%
sf::st_polygon() %>%
sf::st_sfc() %>%
sf::st_sf(crs = 4326)
hydro_lakes <- paste("https://dnrmaps.wi.gov/arcgis2/rest/services/",
"TS_AGOL_STAGING_SERVICES/EN_AGOL_STAGING_SurfaceWater_WTM/",
"MapServer/1",
sep = "")
format_point_coords(point)
format_multipoint_coords(multipoint)
out
library(wdnr.gis)
service_urls
service_urls%>%view()
library(tidyverse)
service_urls%>%view()
service_urls%>%slice(1291)
context("Utilities functions")
pt_a <- c(-90, 45)
pt_b <- c(-89, 44)
sf_pt <- sf_points(pt_a)
sf_multipt <- sf_points(pt_a, pt_b)
sf_line <- sf_lines(pt_a, pt_b)
sf_poly <- sf_polygon(c(0, 0), c(0, 1), c(1, 1), c(1,0), c(0,0))
test_that("sf_objects correctly return sf objects", {
expect_equal(class(sf_pt), c("sf", "data.frame"))
expect_equal(class(sf_multipt), c("sf", "data.frame"))
expect_equal(class(sf_line), c("sf", "data.frame"))
expect_equal(class(sf_poly), c("sf", "data.frame"))
})
test_that("sql_where returns correct SQL WHERE clauses", {
expect_equal(sql_where(foo = "bar"), "foo = 'bar'")
expect_equal(
sql_where(foo = "bar", bar = "baz"),
"foo = 'bar' AND bar = 'baz'"
)
expect_equal(
sql_where(foo = c("bar", "baz"), rel_op = "IN"),
"foo IN ( 'bar' , 'baz' )"
)
expect_equal(
sql_where(foo = c("bar", "baz"), a = "b", rel_op = "IN"),
"foo IN ( 'bar' , 'baz' ) AND a IN 'b'"
)
})
test_that("get_geometry_type returns the correct geometry types", {
line_url <- paste("https://dnrmaps.wi.gov/arcgis/rest/services/WT_SWDV/",
"WT_Inland_Water_Resources_WTM_Ext_v2/MapServer/2")
expect_equal(get_geometry_type(line_url = "esriGeometryPolyline"))
})
library(testthat)
pt_a <- c(-90, 45)
pt_b <- c(-89, 44)
sf_pt <- sf_points(pt_a)
sf_multipt <- sf_points(pt_a, pt_b)
sf_line <- sf_lines(pt_a, pt_b)
sf_poly <- sf_polygon(c(0, 0), c(0, 1), c(1, 1), c(1,0), c(0,0))
test_that("sf_objects correctly return sf objects", {
expect_equal(class(sf_pt), c("sf", "data.frame"))
expect_equal(class(sf_multipt), c("sf", "data.frame"))
expect_equal(class(sf_line), c("sf", "data.frame"))
expect_equal(class(sf_poly), c("sf", "data.frame"))
})
test_that("sql_where returns correct SQL WHERE clauses", {
expect_equal(sql_where(foo = "bar"), "foo = 'bar'")
expect_equal(
sql_where(foo = "bar", bar = "baz"),
"foo = 'bar' AND bar = 'baz'"
)
expect_equal(
sql_where(foo = c("bar", "baz"), rel_op = "IN"),
"foo IN ( 'bar' , 'baz' )"
)
expect_equal(
sql_where(foo = c("bar", "baz"), a = "b", rel_op = "IN"),
"foo IN ( 'bar' , 'baz' ) AND a IN 'b'"
)
})
test_that("get_geometry_type returns the correct geometry types", {
line_url <- paste("https://dnrmaps.wi.gov/arcgis/rest/services/WT_SWDV/",
"WT_Inland_Water_Resources_WTM_Ext_v2/MapServer/2")
expect_equal(get_geometry_type(line_url = "esriGeometryPolyline"))
})
devtools::load_all()
detach("package:arcpullr", unload=TRUE)
detach("package:wdnr.gis", unload=TRUE)
devtools::load_all()
test_that("get_geometry_type returns the correct geometry types", {
line_url <- paste("https://dnrmaps.wi.gov/arcgis/rest/services/WT_SWDV/",
"WT_Inland_Water_Resources_WTM_Ext_v2/MapServer/2")
expect_equal(get_geometry_type(line_url = "esriGeometryPolyline"))
})
test_that("get_geometry_type returns the correct geometry types", {
line_url <- paste("https://dnrmaps.wi.gov/arcgis/rest/services/WT_SWDV/",
"WT_Inland_Water_Resources_WTM_Ext_v2/MapServer/2")
expect_equal(get_geometry_type(line_url) = "esriGeometryPolyline")
})
test_that("get_geometry_type returns the correct geometry types", {
line_url <- paste("https://dnrmaps.wi.gov/arcgis/rest/services/WT_SWDV/",
"WT_Inland_Water_Resources_WTM_Ext_v2/MapServer/2")
expect_equal(get_geometry_type(line_url) == "esriGeometryPolyline")
})
devtools::load_all()
test_that("get_geometry_type returns the correct geometry types", {
line_url <- paste("https://dnrmaps.wi.gov/arcgis/rest/services/WT_SWDV/",
"WT_Inland_Water_Resources_WTM_Ext_v2/MapServer/2")
expect_equal(get_geometry_type(line_url) == "esriGeometryPolyline")
})
get_geometry_type(line_url)
line_url <- paste("https://dnrmaps.wi.gov/arcgis/rest/services/WT_SWDV/",
"WT_Inland_Water_Resources_WTM_Ext_v2/MapServer/2")
get_geometry_type(line_url)
paste0("https://dnrmaps.wi.gov/arcgis/rest/services/WT_SWDV/",
"WT_Inland_Water_Resources_WTM_Ext_v2/MapServer/2")
line_url <- paste0("https://dnrmaps.wi.gov/arcgis/rest/services/WT_SWDV/",
"WT_Inland_Water_Resources_WTM_Ext_v2/MapServer/2")
get_geometry_type(line_url)
test_that("get_geometry_type returns the correct geometry types", {
line_url <- paste0("https://dnrmaps.wi.gov/arcgis/rest/services/WT_SWDV/",
"WT_Inland_Water_Resources_WTM_Ext_v2/MapServer/2")
expect_equal(get_geometry_type(line_url) == "esriGeometryPolyline")
})
test_that("get_geometry_type returns the correct geometry types", {
line_url <- paste0("https://dnrmaps.wi.gov/arcgis/rest/services/WT_SWDV/",
"WT_Inland_Water_Resources_WTM_Ext_v2/MapServer/2")
expect_equal(get_geometry_type(line_url),"esriGeometryPolyline")
})
test_that("get_geometry_type returns the correct geometry types", {
server <- "https://dnrmaps.wi.gov/arcgis/rest/services/"
line_service <- "WT_SWDV/WT_Inland_Water_Resources_WTM_Ext_v2/MapServer/2"
polygon_service <- "WT_SWDV/WT_Inland_Water_Resources_WTM_Ext_v2/MapServer/3"
expect_equal(get_geometry_type(paste0(server,line_service)),
"esriGeometryPolyline"
)
expect_equal(get_geometry_type(paste0(server,polygon_service)),
"esriGeometryPolygon"
)
})
test_that("get_geometry_type returns the correct geometry types", {
server <- "https://dnrmaps.wi.gov/arcgis/rest/services/WT_SWDV/"
points_service <- "WT_Monitoring_Sites_and_Data_WTM_Ext_v2/MapServer/2"
line_service <- "WT_Inland_Water_Resources_WTM_Ext_v2/MapServer/2"
polygon_service <- "WT_Inland_Water_Resources_WTM_Ext_v2/MapServer/3"
expect_equal(get_geometry_type(paste0(server,points_service)),
"esriGeometryMultipoint"
)
expect_equal(get_geometry_type(paste0(server,line_service)),
"esriGeometryPolyline"
)
expect_equal(get_geometry_type(paste0(server,polygon_service)),
"esriGeometryPolygon"
)
})
points_service <- "WT_Monitoring_Sites_and_Data_WTM_Ext_v2/MapServer/2"
get_geometry_type(paste0(server,points_service)
)
server <- "https://dnrmaps.wi.gov/arcgis/rest/services/WT_SWDV/"
get_geometry_type(paste0(server,points_service)
)
test_that("get_geometry_type returns the correct geometry types", {
server <- "https://dnrmaps.wi.gov/arcgis/rest/services/WT_SWDV/"
points_service <- "WT_Monitoring_Sites_and_Data_WTM_Ext_v2/MapServer/2"
line_service <- "WT_Inland_Water_Resources_WTM_Ext_v2/MapServer/2"
polygon_service <- "WT_Inland_Water_Resources_WTM_Ext_v2/MapServer/3"
expect_equal(get_geometry_type(paste0(server,points_service)),
"esriGeometryPoint"
)
expect_equal(get_geometry_type(paste0(server,line_service)),
"esriGeometryPolyline"
)
expect_equal(get_geometry_type(paste0(server,polygon_service)),
"esriGeometryPolygon"
)
})
devtools::load_all()
library(wdnr.gis)
devtools::instal()
devtools::install()
