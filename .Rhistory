c(-88.3,44.1),
c(-88.1,44.1),
c(-88.1,44.7),
crs = 4326
) %>%
mutate(query_fc_type = "area")
env_query <- mutate(poly_query, query_fc_type = "envelope")
# join line querying layers together
line_query_layers <- tribble(
~query_fc_type, ~query_fc_object,
"line", line_query,
"point", pt_query,
"multipoint", multipt_query,
"area", poly_query,
"envelope", env_query
) %>%
mutate(fc_type = "line")
# feature classes used to query polygons----------------------------------------
pt_query <- sf_point(c(-88.078713819647362, 44.446311608498327),
crs = 4326) %>%
mutate(query_fc_type = "point")
multipt_query <-
sf_points(
c(-87.89001524318387,43.06777561668325),
c(-88.078713819647362, 44.446311608498327),
crs = 4326,
) %>%
mutate(query_fc_type = "multipoint")
line_query <-
sf_line(   c(-87.89001524318387,43.06777561668325),
c(-88.078713819647362, 44.446311608498327),
crs = 4326) %>%
mutate(query_fc_type = "line")
# poly and envelope query layers
poly_query <- sf_polygon(
c(-88.1,44.7),
c(-88.3,44.7),
c(-88.3,44.1),
c(-88.1,44.1),
c(-88.1,44.7),
crs = 4326
) %>%
mutate(query_fc_type = "area")
env_query <- mutate(poly_query, query_fc_type = "envelope")
# join polygon querying layers together
poly_query_layers <- tribble(
~query_fc_type, ~query_fc_object,
"line", line_query,
"point", pt_query,
"multipoint", multipt_query,
"area", poly_query,
"envelope", env_query
) %>%
mutate(fc_type = "area")
# put everything together in tibbles and run tests------------------------------
query_layers <- list(
pt_query_layers,
line_query_layers,
poly_query_layers
) %>%
do.call("rbind", .)
fc_sp_rel_test <- expand_grid(
fc_type = c("line", "point", "area"),
query_fc_type = c("line", "point", "multipoint", "area", "envelope"),
sp_rel = sp_rels_to_test
) %>%
left_join(query_urls, by = "fc_type") %>%
left_join(query_layers, by = c("fc_type", "query_fc_type")) %>%
mutate(query_function = case_when(
query_fc_type == "line" ~ list(get_layer_by_line),
query_fc_type == "point" ~ list(get_layer_by_point),
query_fc_type == "multipoint" ~ list(get_layer_by_multipoint),
query_fc_type == "area" ~ list(get_layer_by_poly),
query_fc_type == "envelope" ~ list(get_layer_by_envelope)
))
# pull results using each spatial rel
test_results3 <-
fc_sp_rel_test %>%
mutate(service_object = pmap(
list(query_function, url, query_fc_object, sp_rel),
function(f, x, y, z) {
Sys.sleep(0.1)
return(suppressWarnings(do.call(f, list(x, y, z))))
}),
valid = map_lgl(service_object, ~nrow(tibble(.x)) >= 1)
)
fuck <- test_results3%>%
rename(valid2 = valid)%>%
select(fc_type,query_fc_type,sp_rel,valid2)%>%
left_join(test_results%>%
select(fc_type,query_fc_type,sp_rel,valid))%>%
mutate(fuck = valid == valid2)
fuck%>%
filter(fuck == FALSE)%>%
view()
#WDNR Server
server <- "https://dnrmaps.wi.gov/arcgis/rest/services/"
server2 <- "https://dnrmaps.wi.gov/arcgis2/rest/services/"
#River URL
layer <- "TS_AGOL_STAGING_SERVICES/EN_AGOL_STAGING_SurfaceWater_WTM/MapServer/2"
river_url <- paste0(server,layer)
#Country URL
layer <- "DW_Map_Dynamic/EN_Basic_Basemap_WTM_Ext_Dynamic_L16/MapServer/3"
county_url <- paste0(server2,layer)
#Trout URL
layer <- "FM_Trout/FM_TROUT_HAB_SITES_WTM_Ext/MapServer/0"
trout_url <- paste0(server,layer)
#Watershed URL
layer <- "WT_SWDV/WT_Inland_Water_Resources_WTM_Ext_v2/MapServer/5"
watershed_url <- paste0(server,layer)
#get layers for queries
brown_county <- wis_countis[wis_counties$county = "brown"]
#WDNR Server
server <- "https://dnrmaps.wi.gov/arcgis/rest/services/"
server2 <- "https://dnrmaps.wi.gov/arcgis2/rest/services/"
#River URL
layer <- "TS_AGOL_STAGING_SERVICES/EN_AGOL_STAGING_SurfaceWater_WTM/MapServer/2"
river_url <- paste0(server,layer)
#Country URL
layer <- "DW_Map_Dynamic/EN_Basic_Basemap_WTM_Ext_Dynamic_L16/MapServer/3"
county_url <- paste0(server2,layer)
#Trout URL
layer <- "FM_Trout/FM_TROUT_HAB_SITES_WTM_Ext/MapServer/0"
trout_url <- paste0(server,layer)
#Watershed URL
layer <- "WT_SWDV/WT_Inland_Water_Resources_WTM_Ext_v2/MapServer/5"
watershed_url <- paste0(server,layer)
#get layers for queries
brown_county <- wis_counties[wis_counties$county = "brown"]
#WDNR Server
server <- "https://dnrmaps.wi.gov/arcgis/rest/services/"
server2 <- "https://dnrmaps.wi.gov/arcgis2/rest/services/"
#River URL
layer <- "TS_AGOL_STAGING_SERVICES/EN_AGOL_STAGING_SurfaceWater_WTM/MapServer/2"
river_url <- paste0(server,layer)
#Country URL
layer <- "DW_Map_Dynamic/EN_Basic_Basemap_WTM_Ext_Dynamic_L16/MapServer/3"
county_url <- paste0(server2,layer)
#Trout URL
layer <- "FM_Trout/FM_TROUT_HAB_SITES_WTM_Ext/MapServer/0"
trout_url <- paste0(server,layer)
#Watershed URL
layer <- "WT_SWDV/WT_Inland_Water_Resources_WTM_Ext_v2/MapServer/5"
watershed_url <- paste0(server,layer)
#get layers for queries
brown_county <- wis_counties[wis_counties$county == "brown"]
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(arcpullr)
library(sf)
#WDNR Server
server <- "https://dnrmaps.wi.gov/arcgis/rest/services/"
server2 <- "https://dnrmaps.wi.gov/arcgis2/rest/services/"
#River URL
layer <- "TS_AGOL_STAGING_SERVICES/EN_AGOL_STAGING_SurfaceWater_WTM/MapServer/2"
river_url <- paste0(server,layer)
#Country URL
layer <- "DW_Map_Dynamic/EN_Basic_Basemap_WTM_Ext_Dynamic_L16/MapServer/3"
county_url <- paste0(server2,layer)
#Trout URL
layer <- "FM_Trout/FM_TROUT_HAB_SITES_WTM_Ext/MapServer/0"
trout_url <- paste0(server,layer)
#Watershed URL
layer <- "WT_SWDV/WT_Inland_Water_Resources_WTM_Ext_v2/MapServer/5"
watershed_url <- paste0(server,layer)
#get layers for queries
brown_county <- wis_counties[wis_counties$county == "brown"]
#WDNR Server
server <- "https://dnrmaps.wi.gov/arcgis/rest/services/"
server2 <- "https://dnrmaps.wi.gov/arcgis2/rest/services/"
#River URL
layer <- "TS_AGOL_STAGING_SERVICES/EN_AGOL_STAGING_SurfaceWater_WTM/MapServer/2"
river_url <- paste0(server,layer)
#Country URL
layer <- "DW_Map_Dynamic/EN_Basic_Basemap_WTM_Ext_Dynamic_L16/MapServer/3"
county_url <- paste0(server2,layer)
#Trout URL
layer <- "FM_Trout/FM_TROUT_HAB_SITES_WTM_Ext/MapServer/0"
trout_url <- paste0(server,layer)
#Watershed URL
layer <- "WT_SWDV/WT_Inland_Water_Resources_WTM_Ext_v2/MapServer/5"
watershed_url <- paste0(server,layer)
#get layers for queries
brown_county <- wis_counties[wis_counties$county == "brown",]
mke_river <- get_spatial_layer(river_url,
where = "RIVER_SYS_NAME = 'Milwaukee River'")
#WDNR Server
server <- "https://dnrmaps.wi.gov/arcgis/rest/services/"
server2 <- "https://dnrmaps.wi.gov/arcgis2/rest/services/"
#River URL
layer <- "TS_AGOL_STAGING_SERVICES/EN_AGOL_STAGING_SurfaceWater_WTM/MapServer/2"
river_url <- paste0(server2,layer)
#Country URL
layer <- "DW_Map_Dynamic/EN_Basic_Basemap_WTM_Ext_Dynamic_L16/MapServer/3"
county_url <- paste0(server2,layer)
#Trout URL
layer <- "FM_Trout/FM_TROUT_HAB_SITES_WTM_Ext/MapServer/0"
trout_url <- paste0(server,layer)
#Watershed URL
layer <- "WT_SWDV/WT_Inland_Water_Resources_WTM_Ext_v2/MapServer/5"
watershed_url <- paste0(server,layer)
#get layers for queries
brown_county <- wis_counties[wis_counties$county == "brown",]
mke_river <- get_spatial_layer(river_url,
where = "RIVER_SYS_NAME = 'Milwaukee River'")
watershed <- get_layer_by_point(url = watershed_url,
geometry = trout_projects)
#Get the Milwaukee River MULTILINELINESTRING from the
#Wisconsin Department Natural Resources server.
#Pass the mke_river sf object to the geometry arguement  to perform
#a spatial query.
counties <- get_layer_by_line(url = county_url, geometry = mke_river)
#WDNR Server
server <- "https://dnrmaps.wi.gov/arcgis/rest/services/"
server2 <- "https://dnrmaps.wi.gov/arcgis2/rest/services/"
#River URL
layer <- "TS_AGOL_STAGING_SERVICES/EN_AGOL_STAGING_SurfaceWater_WTM/MapServer/2"
river_url <- paste0(server2,layer)
#Country URL
layer <- "DW_Map_Dynamic/EN_Basic_Basemap_WTM_Ext_Dynamic_L16/MapServer/3"
county_url <- paste0(server,layer)
#Trout URL
layer <- "FM_Trout/FM_TROUT_HAB_SITES_WTM_Ext/MapServer/0"
trout_url <- paste0(server,layer)
#Watershed URL
layer <- "WT_SWDV/WT_Inland_Water_Resources_WTM_Ext_v2/MapServer/5"
watershed_url <- paste0(server,layer)
#get layers for queries
brown_county <- wis_counties[wis_counties$county == "brown",]
mke_river <- get_spatial_layer(river_url,
where = "RIVER_SYS_NAME = 'Milwaukee River'")
# watershed <- get_layer_by_point(url = watershed_url,
#                                 geometry = trout_projects)
#Get the Milwaukee River MULTILINELINESTRING from the
#Wisconsin Department Natural Resources server.
#Pass the mke_river sf object to the geometry arguement  to perform
#a spatial query.
counties <- get_layer_by_line(url = county_url, geometry = mke_river)
#A plot showing the result of the the two queries
ggplot2::ggplot() +
ggplot2::geom_sf(data = counties) +
ggplot2::geom_sf(data = mke_river,color = "blue")
mmsd.wq::param_lookup_table
mmsd.wq::param_lookup_table %>% view()
mmsd.wq::param_lookup_table %>% View()
trout_streams <-
get_layer_by_point(url = river_url, geometry = trout_hab_project)
#WDNR Server
server <- "https://dnrmaps.wi.gov/arcgis/rest/services/"
server2 <- "https://dnrmaps.wi.gov/arcgis2/rest/services/"
#River URL
layer <- "TS_AGOL_STAGING_SERVICES/EN_AGOL_STAGING_SurfaceWater_WTM/MapServer/2"
river_url <- paste0(server2,layer)
#Country URL
layer <- "DW_Map_Dynamic/EN_Basic_Basemap_WTM_Ext_Dynamic_L16/MapServer/3"
county_url <- paste0(server,layer)
#Trout URL
layer <- "FM_Trout/FM_TROUT_HAB_SITES_WTM_Ext/MapServer/0"
trout_url <- paste0(server,layer)
#Watershed URL
layer <- "WT_SWDV/WT_Inland_Water_Resources_WTM_Ext_v2/MapServer/5"
watershed_url <- paste0(server,layer)
#get layers for queries
brown_county <- wis_counties[wis_counties$county == "brown",]
mke_river <- get_spatial_layer(river_url,
where = "RIVER_SYS_NAME = 'Milwaukee River'")
trout_hab_project<-
get_spatial_layer(
trout_url,
where = "WATERBODYNAMECOMBINED = 'Little Bois Brule'",
distance = '1000')
# watershed <- get_layer_by_point(url = watershed_url,
#                                 geometry = trout_projects)
trout_streams <-
get_layer_by_point(url = river_url, geometry = trout_hab_project)
ggplot2::ggplot() +
ggplot2::geom_sf(data = trout_streams, color = "blue") +
ggplot2:geom_sf(data = trout_hab_project,color = "red")
trout_streams <-
get_layer_by_point(url = river_url, geometry = trout_hab_project)
ggplot2::ggplot() +
ggplot2::geom_sf(data = trout_streams, color = "blue") +
ggplot2::geom_sf(data = trout_hab_project,color = "red")
#get trout habitat projects
brown_rivers <-get_layer_by_poly(river_url,brown_county)
plot_layer(brown_rivers)
#get trout habitat projects
brown_rivers <-get_layer_by_poly(river_url,brown_county)
ggplot::ggplot()+
geom_sf(data = brown_county) +
geom_sf(data = brown_rivers)
brown_rivers <-get_layer_by_poly(river_url,brown_county)
ggplot2::ggplot()+
ggplot2::geom_sf(data = brown_county) +
ggplot2::geom_sf(data = brown_rivers)
View(trout_hab_project)
#WDNR Server
server <- "https://dnrmaps.wi.gov/arcgis/rest/services/"
server2 <- "https://dnrmaps.wi.gov/arcgis2/rest/services/"
#River URL
layer <- "TS_AGOL_STAGING_SERVICES/EN_AGOL_STAGING_SurfaceWater_WTM/MapServer/2"
river_url <- paste0(server2,layer)
#Country URL
layer <- "DW_Map_Dynamic/EN_Basic_Basemap_WTM_Ext_Dynamic_L16/MapServer/3"
county_url <- paste0(server,layer)
#Trout URL
layer <- "FM_Trout/FM_TROUT_HAB_SITES_WTM_Ext/MapServer/0"
trout_url <- paste0(server,layer)
#Watershed URL
layer <- "WT_SWDV/WT_Inland_Water_Resources_WTM_Ext_v2/MapServer/5"
watershed_url <- paste0(server,layer)
#get layers for queries
brown_county <- wis_counties[wis_counties$county == "brown",]
mke_river <- get_spatial_layer(river_url,
where = "RIVER_SYS_NAME = 'Milwaukee River'")
trout_hab_project<-
get_spatial_layer(
trout_url,
where = "WATERBODYNAMECOMBINED = 'Little Bois Brule'",
distance = '1000')
trout_hab_project<-
get_spatial_layer(
trout_url,
where = "WATERBODYNAMECOMBINED = 'Little Bois Brule'")
trout_hab_project<-
get_spatial_layer(
trout_url,
where = "FISCALYEAR = 2018")
# watershed <- get_layer_by_point(url = watershed_url,
#                                 geometry = trout_projects)
View(trout_hab_project)
trout_counties2018 <-
get_layer_by_point(url = county_url, geometry = trout_hab_project)
ggplot2::ggplot() +
ggplot2::geom_sf(data = trout_streams, color = "blue") +
ggplot2::geom_sf(data = trout_hab_project,color = "red")
trout_counties2018 <-
get_layer_by_point(url = county_url, geometry = trout_hab_project)
ggplot2::ggplot() +
ggplot2::geom_sf(data = trout_counties2018) +
ggplot2::geom_sf(data = trout_hab_project,color = "red")
trout_counties2018 <-
get_layer_by_multipoint(url = county_url, geometry = trout_hab_project)
ggplot2::ggplot() +
ggplot2::geom_sf(data = trout_counties2018) +
ggplot2::geom_sf(data = trout_hab_project,color = "red")
trout_counties2018 <-
get_layer_by_multipoint(url = county_url, geometry = trout_hab_project)
ggplot2::ggplot() +
ggplot2::geom_sf(data = trout_counties2018,color = "gray50") +
ggplot2::geom_sf(data = wis_counties)+
ggplot2::geom_sf(data = trout_hab_project,color = "red")
trout_counties2018 <-
get_layer_by_multipoint(url = county_url, geometry = trout_hab_project)
ggplot2::ggplot() +
ggplot2::geom_sf(data = trout_counties2018,color = "black") +
ggplot2::geom_sf(data = wis_counties)+
ggplot2::geom_sf(data = trout_hab_project,color = "red")
trout_counties2018 <-
get_layer_by_multipoint(url = county_url, geometry = trout_hab_project)
ggplot2::ggplot() +
ggplot2::geom_sf(data = trout_counties2018,fill = "black") +
ggplot2::geom_sf(data = wis_counties)+
ggplot2::geom_sf(data = trout_hab_project,color = "red")
trout_counties2018 <-
get_layer_by_multipoint(url = county_url, geometry = trout_hab_project)
ggplot2::ggplot() +
ggplot2::geom_sf(data = wis_counties)+
ggplot2::geom_sf(data = trout_counties2018,fill = "black") +
ggplot2::geom_sf(data = trout_hab_project,color = "red")
trout_counties2018 <-
get_layer_by_multipoint(url = county_url, geometry = trout_hab_project)
ggplot2::ggplot() +
ggplot2::geom_sf(data = wis_counties)+
ggplot2::geom_sf(data = trout_counties2018,fill = "gray37") +
ggplot2::geom_sf(data = trout_hab_project,color = "red")
trout_counties2018 <-
get_layer_by_multipoint(url = county_url, geometry = trout_hab_project)
ggplot2::ggplot() +
ggplot2::geom_sf(data = wis_counties)+
ggplot2::geom_sf(data = trout_counties2018,
fill = "gray75",
color = "black") +
ggplot2::geom_sf(data = trout_hab_project,color = "red")
trout_counties2018 <-
get_layer_by_multipoint(url = county_url, geometry = trout_hab_project)
ggplot2::ggplot() +
ggplot2::geom_sf(data = wis_counties)+
ggplot2::geom_sf(data = trout_counties2018,
fill = "gray75",
color = "gray60") +
ggplot2::geom_sf(data = trout_hab_project,color = "red")
?get_layer_by_envelope
brown_rivers get_layer_by_envelope(river_url,brown_county)
brown_rivers <- get_layer_by_envelope(river_url,brown_county)
ggplot2::ggplot()+
ggplot2::geom_sf(data = brown_county) +
ggplot2::geom_sf(data = brown_rivers)
brown_rivers <- get_layer_by_envelope(river_url,brown_county)
ggplot2::ggplot()+
ggplot2::geom_sf(data = brown_county) +
ggplot2::geom_sf(data = brown_rivers,color = "blue",alpha = 0.25)
brown_rivers <-get_layer_by_poly(river_url,brown_county)
ggplot2::ggplot()+
ggplot2::geom_sf(data = brown_county) +
ggplot2::geom_sf(data = brown_rivers,color = "blue",alpha = 0.25)
brown_rivers <- get_layer_by_poly(river_url,
brown_county,
where = "STREAM_ORDER > 3")
ggplot2::ggplot()+
ggplot2::geom_sf(data = brown_county) +
ggplot2::geom_sf(data = brown_rivers,color = "blue",alpha = 0.25)
brown_rivers <-get_layer_by_poly(river_url,brown_county)
ggplot2::ggplot()+
ggplot2::geom_sf(data = brown_county) +
ggplot2::geom_sf(data = brown_rivers,color = "blue",alpha = 0.25)
brown_rivers <-get_layer_by_poly(river_url,brown_county,sp_rel = "esriSpatialRelCrosses")
ggplot2::ggplot()+
ggplot2::geom_sf(data = brown_county) +
ggplot2::geom_sf(data = brown_rivers,color = "blue",alpha = 0.25)
brown_rivers <- get_layer_by_poly(river_url,
brown_county,
where = "STREAM_ORDER > 3")
ggplot2::ggplot()+
ggplot2::geom_sf(data = brown_county) +
ggplot2::geom_sf(data = brown_rivers,color = "blue",alpha = 0.25)
View(brown_rivers)
sp_rel_valid
sp_rel_lookup %>% view()
sp_rel_lookup %>%View()
trout_streams <-
get_layer_by_point(url = river_url, geometry = trout_hab_project)
ggplot2::ggplot() +
ggplot2::geom_sf(data = trout_streams, color = "blue") +
ggplot2::geom_sf(data = trout_hab_project,color = "red")
trout_streams <-
get_layer_by_point(url = river_url, geometry = trout_hab_project)
ggplot2::ggplot() +
ggplot2::geom_sf(data = trout_streams, color = "blue") +
ggplot2::geom_sf(data = trout_hab_project,color = "red")
#WDNR Server
server <- "https://dnrmaps.wi.gov/arcgis/rest/services/"
server2 <- "https://dnrmaps.wi.gov/arcgis2/rest/services/"
#River URL
layer <- "TS_AGOL_STAGING_SERVICES/EN_AGOL_STAGING_SurfaceWater_WTM/MapServer/2"
river_url <- paste0(server2,layer)
#Country URL
layer <- "DW_Map_Dynamic/EN_Basic_Basemap_WTM_Ext_Dynamic_L16/MapServer/3"
county_url <- paste0(server,layer)
#Trout URL
layer <- "FM_Trout/FM_TROUT_HAB_SITES_WTM_Ext/MapServer/0"
trout_url <- paste0(server,layer)
#Watershed URL
layer <- "WT_SWDV/WT_Inland_Water_Resources_WTM_Ext_v2/MapServer/5"
watershed_url <- paste0(server,layer)
#get layers for queries
brown_county <- wis_counties[wis_counties$county == "brown",]
mke_river <- get_spatial_layer(river_url,
where = "RIVER_SYS_NAME = 'Milwaukee River'")
trout_hab_project<-
get_spatial_layer(
trout_url,
where = "WATERBODYNAMECOMBINED = 'Little Bois Brule'",
distance = '1000')
trout_hab_project<-
get_spatial_layer(
trout_url,
where = "WATERBODYNAMECOMBINED = 'Little Bois Brule'")
trout_hab_projects<-
get_spatial_layer(
trout_url,
where = "FISCALYEAR = 2018")
# watershed <- get_layer_by_point(url = watershed_url,
#                                 geometry = trout_projects)
trout_streams <-
get_layer_by_point(url = river_url, geometry = trout_hab_project)
ggplot2::ggplot() +
ggplot2::geom_sf(data = trout_streams, color = "blue") +
ggplot2::geom_sf(data = trout_hab_project,color = "red")
trout_counties2018 <-
get_layer_by_multipoint(url = county_url, geometry = trout_hab_project)
ggplot2::ggplot() +
ggplot2::geom_sf(data = wis_counties)+
ggplot2::geom_sf(data = trout_counties2018,
fill = "gray75",color = "gray60") +
ggplot2::geom_sf(data = trout_hab_projects,color = "red")
trout_counties2018 <-
get_layer_by_multipoint(url = county_url, geometry = trout_hab_projects)
ggplot2::ggplot() +
ggplot2::geom_sf(data = wis_counties)+
ggplot2::geom_sf(data = trout_counties2018,
fill = "gray75",color = "gray60") +
ggplot2::geom_sf(data = trout_hab_projects,color = "red")
brown_rivers <- get_layer_by_envelope(river_url,mke_river)
ggplot2::ggplot()+
ggplot2::geom_sf(data = brown_county) +
ggplot2::geom_sf(data = brown_rivers,color = "blue",alpha = 0.25)
brown_rivers <- get_layer_by_envelope(river_url,trout_hab_project)
ggplot2::ggplot()+
# ggplot2::geom_sf(data = brown_county) +
ggplot2::geom_sf(data = brown_rivers,color = "blue",alpha = 0.25)
url <- "https://dnrmaps.wi.gov/arcgis_image/rest/services/DW_Map_Dynamic/EN_DEM_from_LiDAR_Index/MapServer/0"
brown_county
zz <- get_image_layer(url,brown_county)
?z
?get_image_layer
zz <- get_image_layer(url)
zz <- get_map_layer(url,brown_county)
url <- "https://dnrmaps.wi.gov/arcgis_image/rest/services/DW_Map_Dynamic/EN_DEM_from_LiDAR_Index/MapServer/0"
zz <- get_map_layer(url,brown_county)
